{"ast":null,"code":"/******************************************************* **********\n *  AUTH 설정 클래스 -  (로그인, 로그아웃, 회원가입 , AUTH)\n * \n *****************************************************************/\n//서버에서 전달받은 토큰을 읽고 쓰는 class \nexport default class Auth {\n  constructor(http, tokenStorage) {\n    this.http = http;\n    this.tokenStorage = tokenStorage;\n  } //로그인 \n\n\n  async login(username, password) {\n    //로그인 비동기 요청 \n    console.log('로그인 서버요청');\n    const res = await this.http.fetch('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    console.log('로그인:', res); //성공 한다면 토큰스토리지 로그인 정보 저장 \n\n    this.tokenStorage.setToken(res.token);\n    return res;\n  } //회원가입 \n\n\n  async signUp(username, password, name, email) {\n    //회원가입 비동기 요청 \n    const res = await this.http.fetch('/auth/signup', {\n      method: 'POST',\n      body: JSON.stringify({\n        username,\n        password,\n        name,\n        email\n      })\n    });\n    console.log('회원가입:', res); //성공 한다면 토큰스토리지 회원가입정보 저장 \n\n    this.tokenStorage.setToken(res.token);\n    return res;\n  } //api 요청시 현재 토큰정보  \n\n\n  async baseURl() {\n    //토큰을 스토리지로 부터 읽어옴 \n    const baseToken = this.tokenStorage.getToken(); //헤더에 토큰을 추가 하여 보내줌 \n\n    return this.http.fetch('/auth/refresh', {\n      method: 'GET',\n      Headers: {\n        Authorization: `Bearer ${baseToken}`\n      }\n    });\n  }\n\n  async logout() {\n    this.tokenStorage.clearToken();\n  }\n\n}","map":{"version":3,"names":["Auth","constructor","http","tokenStorage","login","username","password","console","log","res","fetch","method","body","JSON","stringify","setToken","token","signUp","name","email","baseURl","baseToken","getToken","Headers","Authorization","logout","clearToken"],"sources":["/Users/seob717/ts-study/netand/NETRestaurant/netrestaurantClient/src/service/auth.js"],"sourcesContent":["/******************************************************* **********\n *  AUTH 설정 클래스 -  (로그인, 로그아웃, 회원가입 , AUTH)\n * \n *****************************************************************/\n\n//서버에서 전달받은 토큰을 읽고 쓰는 class \nexport default class Auth{\n    constructor (http , tokenStorage){\n        this.http = http;\n        this.tokenStorage =tokenStorage\n    }\n\n//로그인 \nasync login(username,password){\n    //로그인 비동기 요청 \n    console.log('로그인 서버요청');\n    const res = await this.http.fetch('/auth/login',{\n        method:'POST',\n        body:JSON.stringify({\n            username,\n            password,\n        })\n    }\n    );\n     console.log('로그인:',res)\n    //성공 한다면 토큰스토리지 로그인 정보 저장 \n    this.tokenStorage.setToken(res.token)\n    return res;\n}\n\n\n//회원가입 \nasync signUp(username , password,name, email){\n//회원가입 비동기 요청 \n const res = await this.http.fetch('/auth/signup',{\n     method:'POST',\n     body:JSON.stringify({\n         username,\n         password,\n         name,\n         email,\n     })\n });\n console.log('회원가입:',res)\n //성공 한다면 토큰스토리지 회원가입정보 저장 \n this.tokenStorage.setToken(res.token);\n return res;\n}\n\n//api 요청시 현재 토큰정보  \nasync  baseURl(){\n    //토큰을 스토리지로 부터 읽어옴 \n    const baseToken = this.tokenStorage.getToken();\n    //헤더에 토큰을 추가 하여 보내줌 \n    return this.http.fetch('/auth/refresh',{\n        method:'GET',\n        Headers:{\n            Authorization: `Bearer ${baseToken}`},\n    });\n}\n\nasync logout(){\n     this.tokenStorage.clearToken();\n    }\n}\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA,eAAe,MAAMA,IAAN,CAAU;EACrBC,WAAW,CAAEC,IAAF,EAASC,YAAT,EAAsB;IAC7B,KAAKD,IAAL,GAAYA,IAAZ;IACA,KAAKC,YAAL,GAAmBA,YAAnB;EACH,CAJoB,CAMzB;;;EACW,MAALC,KAAK,CAACC,QAAD,EAAUC,QAAV,EAAmB;IAC1B;IACAC,OAAO,CAACC,GAAR,CAAY,UAAZ;IACA,MAAMC,GAAG,GAAG,MAAM,KAAKP,IAAL,CAAUQ,KAAV,CAAgB,aAAhB,EAA8B;MAC5CC,MAAM,EAAC,MADqC;MAE5CC,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;QAChBT,QADgB;QAEhBC;MAFgB,CAAf;IAFuC,CAA9B,CAAlB;IAQCC,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBC,GAAnB,EAXyB,CAY1B;;IACA,KAAKN,YAAL,CAAkBY,QAAlB,CAA2BN,GAAG,CAACO,KAA/B;IACA,OAAOP,GAAP;EACH,CAtBwB,CAyBzB;;;EACY,MAANQ,MAAM,CAACZ,QAAD,EAAYC,QAAZ,EAAqBY,IAArB,EAA2BC,KAA3B,EAAiC;IAC7C;IACC,MAAMV,GAAG,GAAG,MAAM,KAAKP,IAAL,CAAUQ,KAAV,CAAgB,cAAhB,EAA+B;MAC7CC,MAAM,EAAC,MADsC;MAE7CC,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;QAChBT,QADgB;QAEhBC,QAFgB;QAGhBY,IAHgB;QAIhBC;MAJgB,CAAf;IAFwC,CAA/B,CAAlB;IASAZ,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBC,GAApB,EAX4C,CAY5C;;IACA,KAAKN,YAAL,CAAkBY,QAAlB,CAA2BN,GAAG,CAACO,KAA/B;IACA,OAAOP,GAAP;EACA,CAzCwB,CA2CzB;;;EACc,MAAPW,OAAO,GAAE;IACZ;IACA,MAAMC,SAAS,GAAG,KAAKlB,YAAL,CAAkBmB,QAAlB,EAAlB,CAFY,CAGZ;;IACA,OAAO,KAAKpB,IAAL,CAAUQ,KAAV,CAAgB,eAAhB,EAAgC;MACnCC,MAAM,EAAC,KAD4B;MAEnCY,OAAO,EAAC;QACJC,aAAa,EAAG,UAASH,SAAU;MAD/B;IAF2B,CAAhC,CAAP;EAKH;;EAEW,MAANI,MAAM,GAAE;IACT,KAAKtB,YAAL,CAAkBuB,UAAlB;EACA;;AAzDoB"},"metadata":{},"sourceType":"module"}