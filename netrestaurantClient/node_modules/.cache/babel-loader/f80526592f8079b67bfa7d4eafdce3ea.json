{"ast":null,"code":"var _jsxFileName = \"/Users/seob717/ts-study/netand/NETRestaurant/netrestaurantClient/src/context/AuthForm.js\",\n    _s = $RefreshSig$();\n\nimport { React, children, useMemo, useState, createRef, createContext, useImperativeHandle, useCallback } from \"react\";\nimport Login from \"../layout/Login\"; //context api 사용법 : https://kyounghwan01.github.io/blog/React/react-context-api/#api\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({}); //createRef 훅 사용법 : https://velog.io/@hoon_dev/React-Ref-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0feat-createRef\n\nconst contextRef = /*#__PURE__*/createRef();\n/*****************************************************************\n *  AUTH 기능 ContextApi 컴포넌트\n *\n *\n * authService : 권한 설정(로그인 , 로그아웃, 회원가입 , Auth) 클래스\n * authController : 권한 설정 감지\n *****************************************************************/\n\nconst AuthForm = _ref => {\n  _s();\n\n  let {\n    authService,\n    authController,\n    children\n  } = _ref;\n  const [isLogin, setIsLogin] = useState(false); //자식에있는 요소를 부모에서 호출하기 위한 훅 :https://developer-alle.tistory.com/372\n\n  useImperativeHandle(contextRef, () => isLogin ? isLogin.token : false); //service 주입 api 요청\n\n  const onSignUp = useCallback(async (username, password, name, email) => {\n    console.log(\"회원가입....\");\n    authService.signup(username, password, name, email).then(res => setIsLogin(res));\n  }, [authService]);\n  const onLogin = useCallback(async (username, password, name, email) => {\n    console.log(\"로그인....\");\n    authService.login(username, password).then(res => {\n      setIsLogin(res);\n      console.log(\"res:\", res);\n    });\n  }, [authService]);\n  const onLogout = useCallback(async (username, password, name, email) => {\n    authService.logout().then(() => setIsLogin(false));\n  }, [authService]); //contextApi 를 사용하기위한 상위 선언변수들을 넣어줍니다\n\n  const contextForm = useMemo(() => ({\n    isLogin,\n    onSignUp,\n    onLogin,\n    onLogout\n  }), [isLogin, onSignUp, onLogin, onLogout]);\n  console.log(\"AuthForm- 로그인 확인:\", isLogin);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextForm,\n    children: isLogin ? //하위 요소 호출\n    children : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Login, {\n        onSignUp: onSignUp,\n        onLogin: onLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthForm, \"8tzY4bs6BKufudp66Etf53xJEWU=\");\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"names":["React","children","useMemo","useState","createRef","createContext","useImperativeHandle","useCallback","Login","AuthContext","contextRef","AuthForm","authService","authController","isLogin","setIsLogin","token","onSignUp","username","password","name","email","console","log","signup","then","res","onLogin","login","onLogout","logout","contextForm"],"sources":["/Users/seob717/ts-study/netand/NETRestaurant/netrestaurantClient/src/context/AuthForm.js"],"sourcesContent":["import {\n  React,\n  children,\n  useMemo,\n  useState,\n  createRef,\n  createContext,\n  useImperativeHandle,\n  useCallback,\n} from \"react\";\nimport Login from \"../layout/Login\";\n\n//context api 사용법 : https://kyounghwan01.github.io/blog/React/react-context-api/#api\nconst AuthContext = createContext({});\n\n//createRef 훅 사용법 : https://velog.io/@hoon_dev/React-Ref-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0feat-createRef\nconst contextRef = createRef();\n\n/*****************************************************************\n *  AUTH 기능 ContextApi 컴포넌트\n *\n *\n * authService : 권한 설정(로그인 , 로그아웃, 회원가입 , Auth) 클래스\n * authController : 권한 설정 감지\n *****************************************************************/\nconst AuthForm = ({ authService, authController, children }) => {\n  const [isLogin, setIsLogin] = useState(false);\n\n  //자식에있는 요소를 부모에서 호출하기 위한 훅 :https://developer-alle.tistory.com/372\n  useImperativeHandle(contextRef, () => (isLogin ? isLogin.token : false));\n\n  //service 주입 api 요청\n  const onSignUp = useCallback(\n    async (username, password, name, email) => {\n      console.log(\"회원가입....\");\n      authService\n        .signup(username, password, name, email)\n        .then((res) => setIsLogin(res));\n    },\n    [authService],\n  );\n\n  const onLogin = useCallback(\n    async (username, password, name, email) => {\n      console.log(\"로그인....\");\n      authService.login(username, password).then((res) => {\n        setIsLogin(res);\n        console.log(\"res:\", res);\n      });\n    },\n    [authService],\n  );\n  const onLogout = useCallback(\n    async (username, password, name, email) => {\n      authService.logout().then(() => setIsLogin(false));\n    },\n    [authService],\n  );\n\n  //contextApi 를 사용하기위한 상위 선언변수들을 넣어줍니다\n  const contextForm = useMemo(\n    () => ({\n      isLogin,\n      onSignUp,\n      onLogin,\n      onLogout,\n    }),\n    [isLogin, onSignUp, onLogin, onLogout],\n  );\n\n  console.log(\"AuthForm- 로그인 확인:\", isLogin);\n\n  return (\n    <AuthContext.Provider value={contextForm}>\n      {isLogin ? (\n        //하위 요소 호출\n        children\n      ) : (\n        <div>\n          <Login onSignUp={onSignUp} onLogin={onLogin} />\n        </div>\n      )}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthForm;\n"],"mappings":";;;AAAA,SACEA,KADF,EAEEC,QAFF,EAGEC,OAHF,EAIEC,QAJF,EAKEC,SALF,EAMEC,aANF,EAOEC,mBAPF,EAQEC,WARF,QASO,OATP;AAUA,OAAOC,KAAP,MAAkB,iBAAlB,C,CAEA;;;AACA,MAAMC,WAAW,gBAAGJ,aAAa,CAAC,EAAD,CAAjC,C,CAEA;;AACA,MAAMK,UAAU,gBAAGN,SAAS,EAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMO,QAAQ,GAAG,QAA+C;EAAA;;EAAA,IAA9C;IAAEC,WAAF;IAAeC,cAAf;IAA+BZ;EAA/B,CAA8C;EAC9D,MAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC,CAD8D,CAG9D;;EACAG,mBAAmB,CAACI,UAAD,EAAa,MAAOI,OAAO,GAAGA,OAAO,CAACE,KAAX,GAAmB,KAA9C,CAAnB,CAJ8D,CAM9D;;EACA,MAAMC,QAAQ,GAAGV,WAAW,CAC1B,OAAOW,QAAP,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiCC,KAAjC,KAA2C;IACzCC,OAAO,CAACC,GAAR,CAAY,UAAZ;IACAX,WAAW,CACRY,MADH,CACUN,QADV,EACoBC,QADpB,EAC8BC,IAD9B,EACoCC,KADpC,EAEGI,IAFH,CAESC,GAAD,IAASX,UAAU,CAACW,GAAD,CAF3B;EAGD,CANyB,EAO1B,CAACd,WAAD,CAP0B,CAA5B;EAUA,MAAMe,OAAO,GAAGpB,WAAW,CACzB,OAAOW,QAAP,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiCC,KAAjC,KAA2C;IACzCC,OAAO,CAACC,GAAR,CAAY,SAAZ;IACAX,WAAW,CAACgB,KAAZ,CAAkBV,QAAlB,EAA4BC,QAA5B,EAAsCM,IAAtC,CAA4CC,GAAD,IAAS;MAClDX,UAAU,CAACW,GAAD,CAAV;MACAJ,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBG,GAApB;IACD,CAHD;EAID,CAPwB,EAQzB,CAACd,WAAD,CARyB,CAA3B;EAUA,MAAMiB,QAAQ,GAAGtB,WAAW,CAC1B,OAAOW,QAAP,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiCC,KAAjC,KAA2C;IACzCT,WAAW,CAACkB,MAAZ,GAAqBL,IAArB,CAA0B,MAAMV,UAAU,CAAC,KAAD,CAA1C;EACD,CAHyB,EAI1B,CAACH,WAAD,CAJ0B,CAA5B,CA3B8D,CAkC9D;;EACA,MAAMmB,WAAW,GAAG7B,OAAO,CACzB,OAAO;IACLY,OADK;IAELG,QAFK;IAGLU,OAHK;IAILE;EAJK,CAAP,CADyB,EAOzB,CAACf,OAAD,EAAUG,QAAV,EAAoBU,OAApB,EAA6BE,QAA7B,CAPyB,CAA3B;EAUAP,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCT,OAAjC;EAEA,oBACE,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEiB,WAA7B;IAAA,UACGjB,OAAO,GACN;IACAb,QAFM,gBAIN;MAAA,uBACE,QAAC,KAAD;QAAO,QAAQ,EAAEgB,QAAjB;QAA2B,OAAO,EAAEU;MAApC;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EALJ;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CA3DD;;GAAMhB,Q;;KAAAA,Q;AA6DN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}