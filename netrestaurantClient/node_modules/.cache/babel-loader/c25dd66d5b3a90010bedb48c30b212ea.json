{"ast":null,"code":"var _jsxFileName = \"/Users/seob717/ts-study/netand/NETRestaurant/netrestaurantClient/src/components/map/CoffeeMap.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport react, { useState, useRef, useEffect, createElement } from \"react\";\nimport KakaoMapScript from \"../../util/kakaoMapScript\";\nimport NET_LOCATION from \"../../util/location\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\n\nconst PlaceInfo = place => {\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"placeinfo\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"title\",\n        href: \"#!\" //   href={place.place_url}\n        ,\n        target: \"_blank\",\n        title: place.place_name,\n        children: place.place_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), place.road_address_name && /*#__PURE__*/_jsxDEV(\"span\", {\n        title: `${place.road_address_name}`,\n        children: place.road_address_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"jibun\",\n        title: `${place.address_name}`,\n        children: [\"\\uC9C0\\uBC88 : \", place.address_name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"tel\",\n        children: place.phone\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"after\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PlaceInfo;\n\nconst CoffeeMap = () => {\n  _s();\n\n  const mapRef = useRef(null);\n  const [markers, setMarkers] = useState([]); // 마커를 담을 배열\n\n  const [map, setMap] = useState(null);\n  const [ps, setPs] = useState(null);\n  const placeOverlay = new KakaoMapScript.maps.CustomOverlay({\n    zIndex: 1\n  });\n  const currCategory = \"CE7\"; // 카페 카테고리 코드\n\n  const contentNode = /*#__PURE__*/createElement(\"div\", {\n    className: \"placeinfo_wrap\",\n    onMouseDown: kakao.maps.event.preventMap,\n    onTouchStart: kakao.maps.event.preventMap\n  }); // 마커 초기화 함수\n\n  function removeMarker() {\n    setMarkers([]);\n  } // 엘리먼트에 이벤트 핸들러를 등록하는 함수입니다\n\n\n  function addEventHandle(target, type, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(type, callback);\n    } else {\n      target.attachEvent(\"on\" + type, callback);\n    }\n  } // 카테고리 검색을 요청하는 함수입니다\n\n\n  function searchPlaces() {\n    // 커스텀 오버레이를 숨깁니다\n    placeOverlay.setMap(null); // 지도에 표시되고 있는 마커를 제거합니다\n\n    removeMarker();\n    ps.categorySearch(currCategory, placesSearchCB, {\n      useMapBounds: true\n    });\n  }\n\n  function displayPlaceInfo(place) {\n    placeOverlay.setPosition(new kakao.maps.LatLng(place.y, place.x));\n    placeOverlay.setMap(map);\n  } // 지도에 마커를 표출하는 함수입니다\n\n\n  function displayPlaces(places) {\n    // 몇번째 카테고리가 선택되어 있는지 얻어옵니다\n    // 이 순서는 스프라이트 이미지에서의 위치를 계산하는데 사용됩니다\n    var order = document.getElementById(currCategory).getAttribute(\"data-order\");\n\n    for (var i = 0; i < places.length; i++) {\n      // 마커를 생성하고 지도에 표시합니다\n      var marker = addMarker(new kakao.maps.LatLng(places[i].y, places[i].x), order); // 마커와 검색결과 항목을 클릭 했을 때\n      // 장소정보를 표출하도록 클릭 이벤트를 등록합니다\n\n      (function (marker, place) {\n        kakao.maps.event.addListener(marker, \"click\", function () {\n          displayPlaceInfo(place);\n        });\n      })(marker, places[i]);\n    }\n  } // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\n\n\n  function placesSearchCB(data, status, pagination) {\n    if (status === kakao.maps.services.Status.OK) {\n      // 정상적으로 검색이 완료됐으면 지도에 마커를 표출합니다\n      displayPlaces(data);\n    } else if (status === kakao.maps.services.Status.ZERO_RESULT) {// 검색결과가 없는경우 해야할 처리가 있다면 이곳에 작성해 주세요\n    } else if (status === kakao.maps.services.Status.ERROR) {// 에러로 인해 검색결과가 나오지 않은 경우 해야할 처리가 있다면 이곳에 작성해 주세요\n    }\n  } // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\n\n\n  function addMarker(position, order) {\n    const imageSrc = \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_category.png\"; // 마커 이미지 url, 스프라이트 이미지를 씁니다\n\n    const imageSize = new kakao.maps.Size(27, 28); // 마커 이미지의 크기\n\n    const imgOptions = {\n      spriteSize: new kakao.maps.Size(72, 208),\n      // 스프라이트 이미지의 크기\n      spriteOrigin: new kakao.maps.Point(46, order * 36),\n      // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n      offset: new kakao.maps.Point(11, 28) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\n\n    };\n    const markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions);\n    const marker = new kakao.maps.Marker({\n      position: position,\n      // 마커의 위치\n      image: markerImage\n    });\n    marker.setMap(map); // 지도 위에 마커를 표출합니다\n\n    setMarkers(marker); // 배열에 생성된 마커를 추가합니다\n\n    return marker;\n  } // 카카오 맵 생성\n\n\n  useEffect(() => {\n    const container = mapRef.current;\n    const options = {\n      center: new KakaoMapScript.maps.LatLng(NET_LOCATION.let, NET_LOCATION.lon),\n      level: 3\n    };\n    const map = new KakaoMapScript.maps.Map(container, options);\n    setMap(map);\n    const ps = new kakao.maps.services.Place(map);\n    setPs(ps);\n    kakao.maps.event.addListener(map, \"idle\", searchPlaces);\n  }, [searchPlaces]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    children: \"Map\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CoffeeMap, \"24Vh/ts3V1tzyTlRCMCd1Ahdrz8=\");\n\n_c2 = CoffeeMap;\nexport default CoffeeMap;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PlaceInfo\");\n$RefreshReg$(_c2, \"CoffeeMap\");","map":{"version":3,"sources":["/Users/seob717/ts-study/netand/NETRestaurant/netrestaurantClient/src/components/map/CoffeeMap.js"],"names":["React","react","useState","useRef","useEffect","createElement","KakaoMapScript","NET_LOCATION","kakao","window","PlaceInfo","place","place_name","road_address_name","address_name","phone","CoffeeMap","mapRef","markers","setMarkers","map","setMap","ps","setPs","placeOverlay","maps","CustomOverlay","zIndex","currCategory","contentNode","className","onMouseDown","event","preventMap","onTouchStart","removeMarker","addEventHandle","target","type","callback","addEventListener","attachEvent","searchPlaces","categorySearch","placesSearchCB","useMapBounds","displayPlaceInfo","setPosition","LatLng","y","x","displayPlaces","places","order","document","getElementById","getAttribute","i","length","marker","addMarker","addListener","data","status","pagination","services","Status","OK","ZERO_RESULT","ERROR","position","imageSrc","imageSize","Size","imgOptions","spriteSize","spriteOrigin","Point","offset","markerImage","MarkerImage","Marker","image","container","current","options","center","let","lon","level","Map","Place"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport react, { useState, useRef, useEffect, createElement } from \"react\";\nimport KakaoMapScript from \"../../util/kakaoMapScript\";\nimport NET_LOCATION from \"../../util/location\";\n\nconst { kakao } = window;\n\nconst PlaceInfo = (place) => {\n  return (\n    <React.Fragment>\n      <div className=\"placeinfo\">\n        <a\n          className=\"title\"\n          href=\"#!\"\n          //   href={place.place_url}\n          target={\"_blank\"}\n          title={place.place_name}\n        >\n          {place.place_name}\n        </a>\n        {place.road_address_name && (\n          <span title={`${place.road_address_name}`}>\n            {place.road_address_name}\n          </span>\n        )}\n        <span className=\"jibun\" title={`${place.address_name}`}>\n          지번 : {place.address_name}\n        </span>\n        <span className=\"tel\">{place.phone}</span>\n      </div>\n      <div className=\"after\"></div>\n    </React.Fragment>\n  );\n};\n\nconst CoffeeMap = () => {\n  const mapRef = useRef(null);\n  const [markers, setMarkers] = useState([]); // 마커를 담을 배열\n  const [map, setMap] = useState(null);\n  const [ps, setPs] = useState(null);\n  const placeOverlay = new KakaoMapScript.maps.CustomOverlay({ zIndex: 1 });\n  const currCategory = \"CE7\"; // 카페 카테고리 코드\n  const contentNode = createElement(\"div\", {\n    className: \"placeinfo_wrap\",\n    onMouseDown: kakao.maps.event.preventMap,\n    onTouchStart: kakao.maps.event.preventMap,\n  });\n\n  // 마커 초기화 함수\n  function removeMarker() {\n    setMarkers([]);\n  }\n\n  // 엘리먼트에 이벤트 핸들러를 등록하는 함수입니다\n  function addEventHandle(target, type, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(type, callback);\n    } else {\n      target.attachEvent(\"on\" + type, callback);\n    }\n  }\n\n  // 카테고리 검색을 요청하는 함수입니다\n  function searchPlaces() {\n    // 커스텀 오버레이를 숨깁니다\n    placeOverlay.setMap(null);\n\n    // 지도에 표시되고 있는 마커를 제거합니다\n    removeMarker();\n\n    ps.categorySearch(currCategory, placesSearchCB, { useMapBounds: true });\n  }\n\n  function displayPlaceInfo(place) {\n    placeOverlay.setPosition(new kakao.maps.LatLng(place.y, place.x));\n    placeOverlay.setMap(map);\n  }\n\n  // 지도에 마커를 표출하는 함수입니다\n  function displayPlaces(places) {\n    // 몇번째 카테고리가 선택되어 있는지 얻어옵니다\n    // 이 순서는 스프라이트 이미지에서의 위치를 계산하는데 사용됩니다\n    var order = document\n      .getElementById(currCategory)\n      .getAttribute(\"data-order\");\n\n    for (var i = 0; i < places.length; i++) {\n      // 마커를 생성하고 지도에 표시합니다\n      var marker = addMarker(\n        new kakao.maps.LatLng(places[i].y, places[i].x),\n        order,\n      );\n\n      // 마커와 검색결과 항목을 클릭 했을 때\n      // 장소정보를 표출하도록 클릭 이벤트를 등록합니다\n      (function (marker, place) {\n        kakao.maps.event.addListener(marker, \"click\", function () {\n          displayPlaceInfo(place);\n        });\n      })(marker, places[i]);\n    }\n  }\n\n  // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\n  function placesSearchCB(data, status, pagination) {\n    if (status === kakao.maps.services.Status.OK) {\n      // 정상적으로 검색이 완료됐으면 지도에 마커를 표출합니다\n      displayPlaces(data);\n    } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\n      // 검색결과가 없는경우 해야할 처리가 있다면 이곳에 작성해 주세요\n    } else if (status === kakao.maps.services.Status.ERROR) {\n      // 에러로 인해 검색결과가 나오지 않은 경우 해야할 처리가 있다면 이곳에 작성해 주세요\n    }\n  }\n\n  // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\n  function addMarker(position, order) {\n    const imageSrc =\n      \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_category.png\"; // 마커 이미지 url, 스프라이트 이미지를 씁니다\n    const imageSize = new kakao.maps.Size(27, 28); // 마커 이미지의 크기\n    const imgOptions = {\n      spriteSize: new kakao.maps.Size(72, 208), // 스프라이트 이미지의 크기\n      spriteOrigin: new kakao.maps.Point(46, order * 36), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n      offset: new kakao.maps.Point(11, 28), // 마커 좌표에 일치시킬 이미지 내에서의 좌표\n    };\n    const markerImage = new kakao.maps.MarkerImage(\n      imageSrc,\n      imageSize,\n      imgOptions,\n    );\n    const marker = new kakao.maps.Marker({\n      position: position, // 마커의 위치\n      image: markerImage,\n    });\n\n    marker.setMap(map); // 지도 위에 마커를 표출합니다\n    setMarkers(marker); // 배열에 생성된 마커를 추가합니다\n\n    return marker;\n  }\n\n  // 카카오 맵 생성\n  useEffect(() => {\n    const container = mapRef.current;\n    const options = {\n      center: new KakaoMapScript.maps.LatLng(\n        NET_LOCATION.let,\n        NET_LOCATION.lon,\n      ),\n      level: 3,\n    };\n    const map = new KakaoMapScript.maps.Map(container, options);\n    setMap(map);\n    const ps = new kakao.maps.services.Place(map);\n    setPs(ps);\n    kakao.maps.event.addListener(map, \"idle\", searchPlaces);\n  }, [searchPlaces]);\n\n  return <div ref={mapRef}>Map</div>;\n};\n\nexport default CoffeeMap;\n"]},"metadata":{},"sourceType":"module"}